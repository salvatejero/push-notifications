package com.liferay.pushnotifications.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.pushnotifications.model.AppVersion;
import com.liferay.pushnotifications.service.AppVersionLocalService;
import com.liferay.pushnotifications.service.persistence.AppVersionPersistence;
import com.liferay.pushnotifications.service.persistence.ApplicationPersistence;
import com.liferay.pushnotifications.service.persistence.PushNotificationsDevicePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the app version local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.pushnotifications.service.impl.AppVersionLocalServiceImpl}.
 * </p>
 *
 * @author Bruno Farache
 * @see com.liferay.pushnotifications.service.impl.AppVersionLocalServiceImpl
 * @see com.liferay.pushnotifications.service.AppVersionLocalServiceUtil
 * @generated
 */
public abstract class AppVersionLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AppVersionLocalService,
        IdentifiableBean {
    @BeanReference(type = com.liferay.pushnotifications.service.ApplicationLocalService.class)
    protected com.liferay.pushnotifications.service.ApplicationLocalService applicationLocalService;
    @BeanReference(type = ApplicationPersistence.class)
    protected ApplicationPersistence applicationPersistence;
    @BeanReference(type = com.liferay.pushnotifications.service.AppVersionLocalService.class)
    protected com.liferay.pushnotifications.service.AppVersionLocalService appVersionLocalService;
    @BeanReference(type = AppVersionPersistence.class)
    protected AppVersionPersistence appVersionPersistence;
    @BeanReference(type = com.liferay.pushnotifications.service.PushNotificationsDeviceLocalService.class)
    protected com.liferay.pushnotifications.service.PushNotificationsDeviceLocalService pushNotificationsDeviceLocalService;
    @BeanReference(type = com.liferay.pushnotifications.service.PushNotificationsDeviceService.class)
    protected com.liferay.pushnotifications.service.PushNotificationsDeviceService pushNotificationsDeviceService;
    @BeanReference(type = PushNotificationsDevicePersistence.class)
    protected PushNotificationsDevicePersistence pushNotificationsDevicePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AppVersionLocalServiceClpInvoker _clpInvoker = new AppVersionLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.liferay.pushnotifications.service.AppVersionLocalServiceUtil} to access the app version local service.
     */

    /**
     * Adds the app version to the database. Also notifies the appropriate model listeners.
     *
     * @param appVersion the app version
     * @return the app version that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AppVersion addAppVersion(AppVersion appVersion)
        throws SystemException {
        appVersion.setNew(true);

        return appVersionPersistence.update(appVersion);
    }

    /**
     * Creates a new app version with the primary key. Does not add the app version to the database.
     *
     * @param appVersionId the primary key for the new app version
     * @return the new app version
     */
    @Override
    public AppVersion createAppVersion(long appVersionId) {
        return appVersionPersistence.create(appVersionId);
    }

    /**
     * Deletes the app version with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param appVersionId the primary key of the app version
     * @return the app version that was removed
     * @throws PortalException if a app version with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AppVersion deleteAppVersion(long appVersionId)
        throws PortalException, SystemException {
        return appVersionPersistence.remove(appVersionId);
    }

    /**
     * Deletes the app version from the database. Also notifies the appropriate model listeners.
     *
     * @param appVersion the app version
     * @return the app version that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AppVersion deleteAppVersion(AppVersion appVersion)
        throws SystemException {
        return appVersionPersistence.remove(appVersion);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AppVersion.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return appVersionPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.pushnotifications.model.impl.AppVersionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return appVersionPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.pushnotifications.model.impl.AppVersionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return appVersionPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return appVersionPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return appVersionPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public AppVersion fetchAppVersion(long appVersionId)
        throws SystemException {
        return appVersionPersistence.fetchByPrimaryKey(appVersionId);
    }

    /**
     * Returns the app version with the primary key.
     *
     * @param appVersionId the primary key of the app version
     * @return the app version
     * @throws PortalException if a app version with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AppVersion getAppVersion(long appVersionId)
        throws PortalException, SystemException {
        return appVersionPersistence.findByPrimaryKey(appVersionId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return appVersionPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the app versions.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.pushnotifications.model.impl.AppVersionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of app versions
     * @param end the upper bound of the range of app versions (not inclusive)
     * @return the range of app versions
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<AppVersion> getAppVersions(int start, int end)
        throws SystemException {
        return appVersionPersistence.findAll(start, end);
    }

    /**
     * Returns the number of app versions.
     *
     * @return the number of app versions
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAppVersionsCount() throws SystemException {
        return appVersionPersistence.countAll();
    }

    /**
     * Updates the app version in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param appVersion the app version
     * @return the app version that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AppVersion updateAppVersion(AppVersion appVersion)
        throws SystemException {
        return appVersionPersistence.update(appVersion);
    }

    /**
     * Returns the application local service.
     *
     * @return the application local service
     */
    public com.liferay.pushnotifications.service.ApplicationLocalService getApplicationLocalService() {
        return applicationLocalService;
    }

    /**
     * Sets the application local service.
     *
     * @param applicationLocalService the application local service
     */
    public void setApplicationLocalService(
        com.liferay.pushnotifications.service.ApplicationLocalService applicationLocalService) {
        this.applicationLocalService = applicationLocalService;
    }

    /**
     * Returns the application persistence.
     *
     * @return the application persistence
     */
    public ApplicationPersistence getApplicationPersistence() {
        return applicationPersistence;
    }

    /**
     * Sets the application persistence.
     *
     * @param applicationPersistence the application persistence
     */
    public void setApplicationPersistence(
        ApplicationPersistence applicationPersistence) {
        this.applicationPersistence = applicationPersistence;
    }

    /**
     * Returns the app version local service.
     *
     * @return the app version local service
     */
    public com.liferay.pushnotifications.service.AppVersionLocalService getAppVersionLocalService() {
        return appVersionLocalService;
    }

    /**
     * Sets the app version local service.
     *
     * @param appVersionLocalService the app version local service
     */
    public void setAppVersionLocalService(
        com.liferay.pushnotifications.service.AppVersionLocalService appVersionLocalService) {
        this.appVersionLocalService = appVersionLocalService;
    }

    /**
     * Returns the app version persistence.
     *
     * @return the app version persistence
     */
    public AppVersionPersistence getAppVersionPersistence() {
        return appVersionPersistence;
    }

    /**
     * Sets the app version persistence.
     *
     * @param appVersionPersistence the app version persistence
     */
    public void setAppVersionPersistence(
        AppVersionPersistence appVersionPersistence) {
        this.appVersionPersistence = appVersionPersistence;
    }

    /**
     * Returns the push notifications device local service.
     *
     * @return the push notifications device local service
     */
    public com.liferay.pushnotifications.service.PushNotificationsDeviceLocalService getPushNotificationsDeviceLocalService() {
        return pushNotificationsDeviceLocalService;
    }

    /**
     * Sets the push notifications device local service.
     *
     * @param pushNotificationsDeviceLocalService the push notifications device local service
     */
    public void setPushNotificationsDeviceLocalService(
        com.liferay.pushnotifications.service.PushNotificationsDeviceLocalService pushNotificationsDeviceLocalService) {
        this.pushNotificationsDeviceLocalService = pushNotificationsDeviceLocalService;
    }

    /**
     * Returns the push notifications device remote service.
     *
     * @return the push notifications device remote service
     */
    public com.liferay.pushnotifications.service.PushNotificationsDeviceService getPushNotificationsDeviceService() {
        return pushNotificationsDeviceService;
    }

    /**
     * Sets the push notifications device remote service.
     *
     * @param pushNotificationsDeviceService the push notifications device remote service
     */
    public void setPushNotificationsDeviceService(
        com.liferay.pushnotifications.service.PushNotificationsDeviceService pushNotificationsDeviceService) {
        this.pushNotificationsDeviceService = pushNotificationsDeviceService;
    }

    /**
     * Returns the push notifications device persistence.
     *
     * @return the push notifications device persistence
     */
    public PushNotificationsDevicePersistence getPushNotificationsDevicePersistence() {
        return pushNotificationsDevicePersistence;
    }

    /**
     * Sets the push notifications device persistence.
     *
     * @param pushNotificationsDevicePersistence the push notifications device persistence
     */
    public void setPushNotificationsDevicePersistence(
        PushNotificationsDevicePersistence pushNotificationsDevicePersistence) {
        this.pushNotificationsDevicePersistence = pushNotificationsDevicePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.liferay.pushnotifications.model.AppVersion",
            appVersionLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.liferay.pushnotifications.model.AppVersion");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AppVersion.class;
    }

    protected String getModelClassName() {
        return AppVersion.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = appVersionPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
