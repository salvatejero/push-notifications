package com.liferay.pushnotifications.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.pushnotifications.model.AppVersion;
import com.liferay.pushnotifications.model.AppVersionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AppVersion service. Represents a row in the &quot;AppVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.pushnotifications.model.AppVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppVersionImpl}.
 * </p>
 *
 * @author Bruno Farache
 * @see AppVersionImpl
 * @see com.liferay.pushnotifications.model.AppVersion
 * @see com.liferay.pushnotifications.model.AppVersionModel
 * @generated
 */
public class AppVersionModelImpl extends BaseModelImpl<AppVersion>
    implements AppVersionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a app version model instance should use the {@link com.liferay.pushnotifications.model.AppVersion} interface instead.
     */
    public static final String TABLE_NAME = "AppVersion";
    public static final Object[][] TABLE_COLUMNS = {
            { "appVersionId", Types.BIGINT },
            { "appVersionKey", Types.VARCHAR },
            { "structure", Types.VARCHAR },
            { "sandbox", Types.BOOLEAN },
            { "createdDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "userId", Types.BIGINT },
            { "applicationId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table AppVersion (appVersionId LONG not null primary key,appVersionKey VARCHAR(75) null,structure VARCHAR(75) null,sandbox BOOLEAN,createdDate DATE null,modifiedDate DATE null,userId LONG,applicationId LONG)";
    public static final String TABLE_SQL_DROP = "drop table AppVersion";
    public static final String ORDER_BY_JPQL = " ORDER BY appVersion.appVersionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AppVersion.appVersionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.pushnotifications.model.AppVersion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.pushnotifications.model.AppVersion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.pushnotifications.model.AppVersion"),
            true);
    public static long APPLICATIONID_COLUMN_BITMASK = 1L;
    public static long APPVERSIONID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.pushnotifications.model.AppVersion"));
    private static ClassLoader _classLoader = AppVersion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AppVersion.class
        };
    private long _appVersionId;
    private String _appVersionKey;
    private String _structure;
    private boolean _sandbox;
    private Date _createdDate;
    private Date _modifiedDate;
    private long _userId;
    private String _userUuid;
    private long _applicationId;
    private long _originalApplicationId;
    private boolean _setOriginalApplicationId;
    private long _columnBitmask;
    private AppVersion _escapedModel;

    public AppVersionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _appVersionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAppVersionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _appVersionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AppVersion.class;
    }

    @Override
    public String getModelClassName() {
        return AppVersion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("appVersionId", getAppVersionId());
        attributes.put("appVersionKey", getAppVersionKey());
        attributes.put("structure", getStructure());
        attributes.put("sandbox", getSandbox());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("userId", getUserId());
        attributes.put("applicationId", getApplicationId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long appVersionId = (Long) attributes.get("appVersionId");

        if (appVersionId != null) {
            setAppVersionId(appVersionId);
        }

        String appVersionKey = (String) attributes.get("appVersionKey");

        if (appVersionKey != null) {
            setAppVersionKey(appVersionKey);
        }

        String structure = (String) attributes.get("structure");

        if (structure != null) {
            setStructure(structure);
        }

        Boolean sandbox = (Boolean) attributes.get("sandbox");

        if (sandbox != null) {
            setSandbox(sandbox);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long applicationId = (Long) attributes.get("applicationId");

        if (applicationId != null) {
            setApplicationId(applicationId);
        }
    }

    @Override
    public long getAppVersionId() {
        return _appVersionId;
    }

    @Override
    public void setAppVersionId(long appVersionId) {
        _appVersionId = appVersionId;
    }

    @Override
    public String getAppVersionKey() {
        if (_appVersionKey == null) {
            return StringPool.BLANK;
        } else {
            return _appVersionKey;
        }
    }

    @Override
    public void setAppVersionKey(String appVersionKey) {
        _appVersionKey = appVersionKey;
    }

    @Override
    public String getStructure() {
        if (_structure == null) {
            return StringPool.BLANK;
        } else {
            return _structure;
        }
    }

    @Override
    public void setStructure(String structure) {
        _structure = structure;
    }

    @Override
    public boolean getSandbox() {
        return _sandbox;
    }

    @Override
    public boolean isSandbox() {
        return _sandbox;
    }

    @Override
    public void setSandbox(boolean sandbox) {
        _sandbox = sandbox;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public long getApplicationId() {
        return _applicationId;
    }

    @Override
    public void setApplicationId(long applicationId) {
        _columnBitmask |= APPLICATIONID_COLUMN_BITMASK;

        if (!_setOriginalApplicationId) {
            _setOriginalApplicationId = true;

            _originalApplicationId = _applicationId;
        }

        _applicationId = applicationId;
    }

    public long getOriginalApplicationId() {
        return _originalApplicationId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            AppVersion.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AppVersion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AppVersion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AppVersionImpl appVersionImpl = new AppVersionImpl();

        appVersionImpl.setAppVersionId(getAppVersionId());
        appVersionImpl.setAppVersionKey(getAppVersionKey());
        appVersionImpl.setStructure(getStructure());
        appVersionImpl.setSandbox(getSandbox());
        appVersionImpl.setCreatedDate(getCreatedDate());
        appVersionImpl.setModifiedDate(getModifiedDate());
        appVersionImpl.setUserId(getUserId());
        appVersionImpl.setApplicationId(getApplicationId());

        appVersionImpl.resetOriginalValues();

        return appVersionImpl;
    }

    @Override
    public int compareTo(AppVersion appVersion) {
        long primaryKey = appVersion.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AppVersion)) {
            return false;
        }

        AppVersion appVersion = (AppVersion) obj;

        long primaryKey = appVersion.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AppVersionModelImpl appVersionModelImpl = this;

        appVersionModelImpl._originalApplicationId = appVersionModelImpl._applicationId;

        appVersionModelImpl._setOriginalApplicationId = false;

        appVersionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AppVersion> toCacheModel() {
        AppVersionCacheModel appVersionCacheModel = new AppVersionCacheModel();

        appVersionCacheModel.appVersionId = getAppVersionId();

        appVersionCacheModel.appVersionKey = getAppVersionKey();

        String appVersionKey = appVersionCacheModel.appVersionKey;

        if ((appVersionKey != null) && (appVersionKey.length() == 0)) {
            appVersionCacheModel.appVersionKey = null;
        }

        appVersionCacheModel.structure = getStructure();

        String structure = appVersionCacheModel.structure;

        if ((structure != null) && (structure.length() == 0)) {
            appVersionCacheModel.structure = null;
        }

        appVersionCacheModel.sandbox = getSandbox();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            appVersionCacheModel.createdDate = createdDate.getTime();
        } else {
            appVersionCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            appVersionCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            appVersionCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        appVersionCacheModel.userId = getUserId();

        appVersionCacheModel.applicationId = getApplicationId();

        return appVersionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{appVersionId=");
        sb.append(getAppVersionId());
        sb.append(", appVersionKey=");
        sb.append(getAppVersionKey());
        sb.append(", structure=");
        sb.append(getStructure());
        sb.append(", sandbox=");
        sb.append(getSandbox());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", applicationId=");
        sb.append(getApplicationId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.liferay.pushnotifications.model.AppVersion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>appVersionId</column-name><column-value><![CDATA[");
        sb.append(getAppVersionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>appVersionKey</column-name><column-value><![CDATA[");
        sb.append(getAppVersionKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>structure</column-name><column-value><![CDATA[");
        sb.append(getStructure());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sandbox</column-name><column-value><![CDATA[");
        sb.append(getSandbox());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>applicationId</column-name><column-value><![CDATA[");
        sb.append(getApplicationId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
