package com.liferay.pushnotifications.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import com.liferay.pushnotifications.service.persistence.ApplicationPreferencesPK;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ApplicationPreferences service. Represents a row in the &quot;ApplicationPreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.pushnotifications.model.impl.ApplicationPreferencesModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.pushnotifications.model.impl.ApplicationPreferencesImpl}.
 * </p>
 *
 * @author Bruno Farache
 * @see ApplicationPreferences
 * @see com.liferay.pushnotifications.model.impl.ApplicationPreferencesImpl
 * @see com.liferay.pushnotifications.model.impl.ApplicationPreferencesModelImpl
 * @generated
 */
public interface ApplicationPreferencesModel extends BaseModel<ApplicationPreferences> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a application preferences model instance should use the {@link ApplicationPreferences} interface instead.
     */

    /**
     * Returns the primary key of this application preferences.
     *
     * @return the primary key of this application preferences
     */
    public ApplicationPreferencesPK getPrimaryKey();

    /**
     * Sets the primary key of this application preferences.
     *
     * @param primaryKey the primary key of this application preferences
     */
    public void setPrimaryKey(ApplicationPreferencesPK primaryKey);

    /**
     * Returns the application preference ID of this application preferences.
     *
     * @return the application preference ID of this application preferences
     */
    public long getApplicationPreferenceId();

    /**
     * Sets the application preference ID of this application preferences.
     *
     * @param applicationPreferenceId the application preference ID of this application preferences
     */
    public void setApplicationPreferenceId(long applicationPreferenceId);

    /**
     * Returns the application ID of this application preferences.
     *
     * @return the application ID of this application preferences
     */
    public long getApplicationId();

    /**
     * Sets the application ID of this application preferences.
     *
     * @param applicationId the application ID of this application preferences
     */
    public void setApplicationId(long applicationId);

    /**
     * Returns the android api key of this application preferences.
     *
     * @return the android api key of this application preferences
     */
    @AutoEscape
    public String getAndroidApiKey();

    /**
     * Sets the android api key of this application preferences.
     *
     * @param androidApiKey the android api key of this application preferences
     */
    public void setAndroidApiKey(String androidApiKey);

    /**
     * Returns the android retries of this application preferences.
     *
     * @return the android retries of this application preferences
     */
    public long getAndroidRetries();

    /**
     * Sets the android retries of this application preferences.
     *
     * @param androidRetries the android retries of this application preferences
     */
    public void setAndroidRetries(long androidRetries);

    /**
     * Returns the ios password certificated of this application preferences.
     *
     * @return the ios password certificated of this application preferences
     */
    @AutoEscape
    public String getIosPasswordCertificated();

    /**
     * Sets the ios password certificated of this application preferences.
     *
     * @param iosPasswordCertificated the ios password certificated of this application preferences
     */
    public void setIosPasswordCertificated(String iosPasswordCertificated);

    /**
     * Returns the ios password sand box certificated of this application preferences.
     *
     * @return the ios password sand box certificated of this application preferences
     */
    @AutoEscape
    public String getIosPasswordSandBoxCertificated();

    /**
     * Sets the ios password sand box certificated of this application preferences.
     *
     * @param iosPasswordSandBoxCertificated the ios password sand box certificated of this application preferences
     */
    public void setIosPasswordSandBoxCertificated(
        String iosPasswordSandBoxCertificated);

    /**
     * Returns the ios sand box cert of this application preferences.
     *
     * @return the ios sand box cert of this application preferences
     */
    public long getIosSandBoxCert();

    /**
     * Sets the ios sand box cert of this application preferences.
     *
     * @param iosSandBoxCert the ios sand box cert of this application preferences
     */
    public void setIosSandBoxCert(long iosSandBoxCert);

    /**
     * Returns the ios prod cert of this application preferences.
     *
     * @return the ios prod cert of this application preferences
     */
    public long getIosProdCert();

    /**
     * Sets the ios prod cert of this application preferences.
     *
     * @param iosProdCert the ios prod cert of this application preferences
     */
    public void setIosProdCert(long iosProdCert);

    /**
     * Returns the created date of this application preferences.
     *
     * @return the created date of this application preferences
     */
    public Date getCreatedDate();

    /**
     * Sets the created date of this application preferences.
     *
     * @param createdDate the created date of this application preferences
     */
    public void setCreatedDate(Date createdDate);

    /**
     * Returns the modificated date of this application preferences.
     *
     * @return the modificated date of this application preferences
     */
    public Date getModificatedDate();

    /**
     * Sets the modificated date of this application preferences.
     *
     * @param modificatedDate the modificated date of this application preferences
     */
    public void setModificatedDate(Date modificatedDate);

    /**
     * Returns the user ID of this application preferences.
     *
     * @return the user ID of this application preferences
     */
    public long getUserId();

    /**
     * Sets the user ID of this application preferences.
     *
     * @param userId the user ID of this application preferences
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this application preferences.
     *
     * @return the user uuid of this application preferences
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this application preferences.
     *
     * @param userUuid the user uuid of this application preferences
     */
    public void setUserUuid(String userUuid);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(ApplicationPreferences applicationPreferences);

    @Override
    public int hashCode();

    @Override
    public CacheModel<ApplicationPreferences> toCacheModel();

    @Override
    public ApplicationPreferences toEscapedModel();

    @Override
    public ApplicationPreferences toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
